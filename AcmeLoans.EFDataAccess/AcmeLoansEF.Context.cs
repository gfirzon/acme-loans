//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AcmeLoans.EFDataAccess
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class AcmeLoansEntitiesEF : DbContext
    {
        public AcmeLoansEntitiesEF()
            : base("name=AcmeLoansEntitiesEF")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Applicant> Applicants { get; set; }
        public virtual DbSet<Application> Applications { get; set; }
        public virtual DbSet<LoanType> LoanTypes { get; set; }
        public virtual DbSet<OrderDetail> OrderDetails { get; set; }
        public virtual DbSet<State> States { get; set; }
    
        public virtual int sp_DeleteLoanApplication(Nullable<int> applicationId)
        {
            var applicationIdParameter = applicationId.HasValue ?
                new ObjectParameter("ApplicationId", applicationId) :
                new ObjectParameter("ApplicationId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeleteLoanApplication", applicationIdParameter);
        }
    
        public virtual ObjectResult<sp_GetAppViewModel_Result> sp_GetAppViewModel()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetAppViewModel_Result>("sp_GetAppViewModel");
        }
    
        public virtual ObjectResult<sp_GetLoanApplicationById_Result> sp_GetLoanApplicationById(Nullable<int> applicationId)
        {
            var applicationIdParameter = applicationId.HasValue ?
                new ObjectParameter("ApplicationId", applicationId) :
                new ObjectParameter("ApplicationId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetLoanApplicationById_Result>("sp_GetLoanApplicationById", applicationIdParameter);
        }
    
        public virtual ObjectResult<sp_GetLoanApplicationsByProcessedType_Result> sp_GetLoanApplicationsByProcessedType(Nullable<bool> isProcessed)
        {
            var isProcessedParameter = isProcessed.HasValue ?
                new ObjectParameter("IsProcessed", isProcessed) :
                new ObjectParameter("IsProcessed", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetLoanApplicationsByProcessedType_Result>("sp_GetLoanApplicationsByProcessedType", isProcessedParameter);
        }
    
        public virtual ObjectResult<string> sp_GetPersonStatus(Nullable<int> age, string gender)
        {
            var ageParameter = age.HasValue ?
                new ObjectParameter("age", age) :
                new ObjectParameter("age", typeof(int));
    
            var genderParameter = gender != null ?
                new ObjectParameter("gender", gender) :
                new ObjectParameter("gender", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_GetPersonStatus", ageParameter, genderParameter);
        }
    
        public virtual int sp_InsertLoanApplicant(string sSN, string lastName, string firstName, Nullable<System.DateTime> dateOfBirth, string streetAddress, string city, Nullable<int> stateId, string zip, string homePhone, string mobilePhone, string email, ObjectParameter applicantId)
        {
            var sSNParameter = sSN != null ?
                new ObjectParameter("SSN", sSN) :
                new ObjectParameter("SSN", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var dateOfBirthParameter = dateOfBirth.HasValue ?
                new ObjectParameter("DateOfBirth", dateOfBirth) :
                new ObjectParameter("DateOfBirth", typeof(System.DateTime));
    
            var streetAddressParameter = streetAddress != null ?
                new ObjectParameter("StreetAddress", streetAddress) :
                new ObjectParameter("StreetAddress", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(int));
    
            var zipParameter = zip != null ?
                new ObjectParameter("Zip", zip) :
                new ObjectParameter("Zip", typeof(string));
    
            var homePhoneParameter = homePhone != null ?
                new ObjectParameter("HomePhone", homePhone) :
                new ObjectParameter("HomePhone", typeof(string));
    
            var mobilePhoneParameter = mobilePhone != null ?
                new ObjectParameter("MobilePhone", mobilePhone) :
                new ObjectParameter("MobilePhone", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertLoanApplicant", sSNParameter, lastNameParameter, firstNameParameter, dateOfBirthParameter, streetAddressParameter, cityParameter, stateIdParameter, zipParameter, homePhoneParameter, mobilePhoneParameter, emailParameter, applicantId);
        }
    
        public virtual int sp_InsertLoanApplication(Nullable<int> loanTypeId, Nullable<decimal> amount, Nullable<bool> isProcessed, Nullable<System.DateTime> created, ObjectParameter appId)
        {
            var loanTypeIdParameter = loanTypeId.HasValue ?
                new ObjectParameter("LoanTypeId", loanTypeId) :
                new ObjectParameter("LoanTypeId", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var isProcessedParameter = isProcessed.HasValue ?
                new ObjectParameter("IsProcessed", isProcessed) :
                new ObjectParameter("IsProcessed", typeof(bool));
    
            var createdParameter = created.HasValue ?
                new ObjectParameter("Created", created) :
                new ObjectParameter("Created", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertLoanApplication", loanTypeIdParameter, amountParameter, isProcessedParameter, createdParameter, appId);
        }
    
        public virtual int sp_UpdateLoanApplication(Nullable<int> applicationId, Nullable<int> loanTypeId, Nullable<decimal> amount, Nullable<bool> isProcessed, Nullable<System.DateTime> processedDate)
        {
            var applicationIdParameter = applicationId.HasValue ?
                new ObjectParameter("ApplicationId", applicationId) :
                new ObjectParameter("ApplicationId", typeof(int));
    
            var loanTypeIdParameter = loanTypeId.HasValue ?
                new ObjectParameter("LoanTypeId", loanTypeId) :
                new ObjectParameter("LoanTypeId", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var isProcessedParameter = isProcessed.HasValue ?
                new ObjectParameter("IsProcessed", isProcessed) :
                new ObjectParameter("IsProcessed", typeof(bool));
    
            var processedDateParameter = processedDate.HasValue ?
                new ObjectParameter("ProcessedDate", processedDate) :
                new ObjectParameter("ProcessedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateLoanApplication", applicationIdParameter, loanTypeIdParameter, amountParameter, isProcessedParameter, processedDateParameter);
        }
    }
}
